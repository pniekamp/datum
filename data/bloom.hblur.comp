#version 450 core

layout(local_size_x = 64) in;
layout(local_size_x_id = 1) in;

layout(constant_id = 85) const uint Sigma = 8;
layout(constant_id = 84) const uint Radius = 16;

const uint SizeX = gl_WorkGroupSize.x - Radius - Radius;

layout(set=0, binding=5) uniform sampler2D src;

layout(set=3, binding=1) writeonly uniform image2D dest;

shared vec3 texels[SizeX + Radius + Radius];

///////////////////////// blur //////////////////////////////////////////////
vec3 blur(uint k, vec3 coefficients)
{
  vec3 avg = vec3(0.0);
  float weight = 0.0;

  avg += texels[k] * coefficients.x;    
  weight += coefficients.x;
  coefficients.xy *= coefficients.yz;

  for(uint i = 1; i <= Radius; ++i)
  {
    avg += texels[k + i] * coefficients.x;
    avg += texels[k - i] * coefficients.x;
    weight += 2 * coefficients.x;
    coefficients.xy *= coefficients.yz;
  }
  
  return avg / weight;
}

///////////////////////// main //////////////////////////////////////////////
void main(void)
{ 
  ivec2 ij = ivec2(gl_LocalInvocationID.xy);
  ivec2 tile = ivec2(gl_WorkGroupID.x * SizeX, gl_WorkGroupID.y); 
  
  vec2 texelsize = 1.0 / textureSize(src, 0);
  
  texels[ij.x] = texture(src, vec2(2*(tile.x + ij.x - Radius) + 0.5, tile.y + ij.y) * texelsize).rgb;
  
  barrier();
  
  if (ij.x < SizeX)
  {  
    vec3 coefficients;
    coefficients.x = 1.0 / (sqrt(2.0 * 3.14159265) * Sigma);
    coefficients.y = exp(-0.5 / (Sigma * Sigma));
    coefficients.z = coefficients.y * coefficients.y;

    imageStore(dest, tile + ij, vec4(blur(ij.x + Radius, coefficients), 1));
  }
}
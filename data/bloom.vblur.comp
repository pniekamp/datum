#version 450 core

layout(local_size_y = 64) in;
layout(local_size_y_id = 2) in;

layout(constant_id = 85) const uint Sigma = 8;
layout(constant_id = 84) const uint Radius = 16;

const uint SizeY = gl_WorkGroupSize.y - Radius - Radius;

layout(set=3, binding=3) uniform sampler2D src;

layout(set=3, binding=11) writeonly uniform image2D dest;

shared vec3 texels[SizeY + Radius + Radius];

///////////////////////// blur //////////////////////////////////////////////
vec3 blur(uint k, vec3 coefficients)
{
  vec3 avg = vec3(0);
  float weight = 0;

  avg += texels[k] * coefficients.x;    
  weight += coefficients.x;
  coefficients.xy *= coefficients.yz;

  for(uint i = 1; i <= Radius; ++i)
  {
    avg += texels[k + i] * coefficients.x;
    avg += texels[k - i] * coefficients.x;
    weight += 2 * coefficients.x;
    coefficients.xy *= coefficients.yz;
  }
  
  return avg / weight;
}

///////////////////////// main //////////////////////////////////////////////
void main()
{ 
  ivec2 ij = ivec2(gl_LocalInvocationID.xy);
  ivec2 tile = ivec2(gl_WorkGroupID.x, gl_WorkGroupID.y * SizeY);
  
  ivec2 viewport = textureSize(src, 0).xy;
  
  if (tile.y + ij.y < viewport.y)
  {
    texels[ij.y] = texelFetch(src, ivec2(tile.x + ij.x, tile.y + ij.y - Radius), 0).rgb;
  }
  else
  {
    texels[ij.y] = vec3(0);
  }

  barrier();
  
  if (ij.y < SizeY)
  {  
    vec3 coefficients;
    coefficients.x = 1.0 / (sqrt(2.0 * 3.14159265) * Sigma);
    coefficients.y = exp(-0.5 / (Sigma * Sigma));
    coefficients.z = coefficients.y * coefficients.y;   

    imageStore(dest, tile + ij, vec4(blur(ij.y + Radius, coefficients), 1));
  }
}
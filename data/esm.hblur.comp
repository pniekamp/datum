#version 440 core

layout(local_size_x = 256) in;
layout(local_size_x_id = 1) in;

layout(constant_id = 84) const uint Radius = 16;

const uint SizeX = gl_WorkGroupSize.x - Radius - Radius;

layout(set=0, binding=19) uniform sampler2D src;

layout(set=0, binding=34) writeonly uniform image2D dest;

shared vec3 texels[SizeX + Radius + Radius];

///////////////////////// blur //////////////////////////////////////////////
vec3 blur(uint k)
{
  vec3 avg = texels[k];
  float weight = 1;

  for(uint i = 1; i <= Radius; ++i)
  {
    avg += texels[k + i];
    avg += texels[k - i];
    weight += 2;
  }
  
  return avg / weight;
}

///////////////////////// main //////////////////////////////////////////////
void main()
{ 
  gl_WorkGroupSize;
  ivec2 ij = ivec2(gl_LocalInvocationID.xy);
  ivec2 tile = ivec2(gl_WorkGroupID.x * SizeX, gl_WorkGroupID.y); 
  ivec2 viewport = imageSize(dest);
  
  texels[ij.x] = texelFetch(src, ivec2(clamp(tile.x + ij.x - int(Radius), 0, viewport.x - 1), tile.y + ij.y), 0).rgb;
  
  barrier();
  
  if (ij.x < SizeX)
  {  
    imageStore(dest, tile + ij, vec4(blur(ij.x + Radius), 1));
  }
}
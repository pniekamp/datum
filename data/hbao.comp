#version 440 core
#include "gbuffer.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(constant_id = 67) const uint Radius = 2;
layout(constant_id = 62) const uint NoiseSize = 16;
layout(constant_id = 63) const uint KernelSize = 16;

const uint SizeX = gl_WorkGroupSize.x - Radius - Radius;
const uint SizeY = gl_WorkGroupSize.y - Radius - Radius;

layout(set=0, binding=0, std430, row_major) readonly buffer SceneSet 
{
  mat4 proj;
  mat4 invproj;
  mat4 view;
  mat4 invview;
  mat4 worldview;
  mat4 prevview;

} scene;

layout(set=0, binding=4) uniform sampler2D normalmap;
layout(set=0, binding=5) uniform sampler2D depthmap;

layout(set=0, binding=16, std430, row_major) readonly buffer SSAOParams 
{
  vec3 noise[NoiseSize];
  vec3 kernel[KernelSize];

} params;

layout(set=0, binding=17) uniform sampler2D prevmap;

layout(set=0, binding=18) writeonly uniform image2D dest;

const uint Rays = 8;
const uint Steps = 4;
const float Strength = 0.1;
const float Falloff = 3.0;
const float Bias = 0.03;

#define PI 3.1415926535897932384626433832795

shared float texels[(SizeY + Radius + Radius) * (SizeX + Radius + Radius)];
shared float depths[(SizeY + Radius + Radius) * (SizeX + Radius + Radius)];

///////////////////////// rotate ////////////////////////////////////////////
vec2 rotate(vec2 vec, vec2 basisx, vec2 basisy)
{
	return vec2(dot(vec, basisx), dot(vec, basisy));
}

///////////////////////// rayocclusion //////////////////////////////////////
float sampleocclusion(vec3 position, vec3 normal, vec3 samplepos,inout float topocclusion)
{
  vec3 horizon = samplepos - position;
  float horizonlength = length(horizon);
  
  float occlusion = dot(normal, horizon) / horizonlength;
  
  float diff = max(occlusion - topocclusion, 0);
  
  topocclusion = max(occlusion, topocclusion);
  
  float dist = min(horizonlength / Falloff, 1);
  
  occlusion = diff * (1 - dist*dist);
  
  return occlusion;
}

///////////////////////// main //////////////////////////////////////////////
void main()
{ 
  gl_WorkGroupSize;
  ivec2 ij = ivec2(gl_LocalInvocationID.xy);
  ivec2 xy = ivec2(gl_WorkGroupID.x * SizeX + ij.x - Radius, gl_WorkGroupID.y * SizeY + ij.y - Radius);
  vec2 viewport = imageSize(dest);
  
  vec2 texcoord = vec2(xy + 0.5) / viewport;
 
  float depth = texture(depthmap, texcoord).r;
  
  vec3 position = view_position(scene.proj, scene.invproj, texcoord, depth);
  vec3 normal = view_normal(scene.view, texture(normalmap, texcoord).xyz);

  vec3 randomvec = params.noise[(xy.x + xy.y * 4) % NoiseSize];

  vec2 basisx = normalize(randomvec.xy);
	vec2 basisy = vec2(-basisx.y, basisx.x);
 
  float screenpixels = (0.25 * viewport.x * scene.proj[1][1]) / position.z;

  float steppixels = screenpixels / (Steps + 1);

  float occlusion = 0;

  for(uint i = 0; i < Rays; ++i)
  {
    vec2 sampledir = rotate(params.kernel[i].xy, basisx, basisy);

    float topocclusion = Bias;

    float raypixels = (randomvec.z * steppixels + 1.0);

    for (uint k = 0; k < Steps; ++k)
    {  
      vec2 uv = round(xy + raypixels * sampledir) / viewport;

      vec3 samplepos = view_position(scene.proj, scene.invproj, uv, texture(depthmap, uv).r);

      occlusion += sampleocclusion(position, normal, samplepos, topocclusion);

      raypixels += steppixels;
    }
  }
  
  occlusion = 1 - min(Strength * occlusion, 1);

  texels[ij.y*(SizeX + Radius + Radius) + ij.x] = occlusion;
  depths[ij.y*(SizeX + Radius + Radius) + ij.x] = depth;

  barrier();
  
  if (ij.x >= Radius && ij.x < SizeX+Radius && ij.y >= Radius && ij.y < SizeY+Radius)
  {
    float avg = 0;
    float spatialweight = 0;

    for(uint j = ij.y - Radius; j < ij.y + Radius; ++j)
    {
      for(uint i = ij.x - Radius; i < ij.x + Radius; ++i)
      {
        float weight = max(1 - 250*abs(depths[j*(SizeX + Radius + Radius) + i] - depth), 0);
        
        avg += weight * texels[j*(SizeX + Radius + Radius) + i];
        spatialweight += weight;
      }
    }
    
    occlusion = avg / spatialweight;

    vec2 prevtexcoord = 0.5 * project(scene.proj, (scene.prevview * scene.invview * vec4(position, 1)).xyz) + 0.5;

    vec4 prevocclusion = texture(prevmap, prevtexcoord);
    
    vec3 prevposition = view_position(scene.proj, scene.invproj, prevtexcoord, prevocclusion.y);
    
    float temporalweight = clamp(5.0 * abs(prevocclusion.x - occlusion) + 0.001 * distance(prevposition, position), 0.1, 1.0);

    occlusion = mix(prevocclusion.x, occlusion, temporalweight);

    imageStore(dest, xy, vec4(occlusion, depth, 0, 0));
  }
}

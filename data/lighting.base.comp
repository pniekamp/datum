#version 450 core
#include "camera.glsl"
#include "gbuffer.glsl"
#include "lighting.glsl"

#define SIZE 16

layout(local_size_x = SIZE, local_size_y = SIZE) in;

layout(std430, set=0, binding=0) buffer SceneSet 
{
  layout(row_major) mat4 proj;
  layout(row_major) mat4 invproj;
  layout(row_major) mat4 view;
  layout(row_major) mat4 invview;
  layout(row_major) mat4 prevview;
  layout(row_major) mat4 skyview;
  
  Camera camera;

  vec3 noise[16];
  vec3 kernel[16];

  layout(row_major) mat4 shadowview[NSLICES];

  MainLight mainlight;
  
  uint pointlightcount;
  PointLight pointlights[256];

} scene;

layout(set=0, binding=1) uniform sampler2DArray albedomap;
layout(set=0, binding=2) uniform sampler2DArray specularmap;
layout(set=0, binding=3) uniform sampler2DArray normalmap;
layout(set=0, binding=4) uniform sampler2DArray depthmap;
layout(set=0, binding=5) uniform sampler2DArray ssaomap;
layout(set=0, binding=6) uniform sampler2DArrayShadow shadowmap;

layout(set=3, binding=0) writeonly uniform image2D dest;

///////////////////////// main //////////////////////////////////////////////
void main(void)
{ 
  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
  
  ivec2 viewport = imageSize(dest);
  
  float depth = texelFetch(depthmap, ivec3(xy, 0), 0).z;

  vec3 position = world_position(scene.invview, scene.proj, scene.invproj, xy, viewport, depth);
  vec3 normal = world_normal(texelFetch(normalmap, ivec3(xy, 0), 0).xyz);
  vec3 eyevec = normalize(scene.camera.position - position);
  
  vec4 albedocolor = texelFetch(albedomap, ivec3(xy, 0), 0);
  vec4 specularcolor = texelFetch(specularmap, ivec3(xy, 0), 0);

  float specularexponent = 1000.0 * specularcolor.w;

  vec3 diffuse = vec3(0);
  vec3 specular = vec3(0);

  float ambientocclusion = ambient_intensity(scene.mainlight, ssaomap, vec2(xy)/viewport);

  float mainlightshadow = shadow_intensity(scene.mainlight, scene.shadowview, shadowmap, position, normal);

  main_light(diffuse, specular, scene.mainlight, normal, eyevec, albedocolor.rgb, specularcolor.rgb, specularexponent, ambientocclusion, mainlightshadow);

  for(uint i = 0, end = scene.pointlightcount; i < end; ++i)
  {
    PointLight pointlight = scene.pointlights[i];

    if (length(pointlight.position - position) < pointlight.attenuation.w)
    {
      point_light(diffuse, specular, pointlight, position, normal, eyevec, albedocolor.rgb, specularcolor.rgb, specularexponent);
    }
  }

  vec3 fragcolor = diffuse + specular * max(1.0 - diffuse, 0.0);
 
  imageStore(dest, xy, vec4(tonemap(scene.camera.exposure * fragcolor), 1.0));
}

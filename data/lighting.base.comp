#version 450 core
#include "gbuffer.glsl"
#include "lighting.glsl"

#define SIZE 16

layout(local_size_x = SIZE, local_size_y = SIZE) in;

layout(std140, set=0, binding=0) uniform SceneSet 
{
  layout(row_major) mat4 proj;
  layout(row_major) mat4 invproj;
  layout(row_major) mat4 view;
  layout(row_major) mat4 invview;
  layout(row_major) mat4 worldview;  
  vec3 camerapos;

} scene;

layout(std430, set=1, binding=0) buffer EnvironmentSet 
{
  MainLight mainlight;
  
  uint pointlightcount;
  PointLight pointlights[256];

} environment;

layout(set=1, binding=1) uniform sampler2D albedomap;
layout(set=1, binding=2) uniform sampler2D specularmap;
layout(set=1, binding=3) uniform sampler2D normalmap;
layout(set=1, binding=4) uniform sampler2D depthmap;

layout(set=4, binding=0) writeonly uniform image2D dest;

///////////////////////// main //////////////////////////////////////////////
void main(void)
{ 
  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
  
  ivec2 viewport = imageSize(dest);
  
  float depth = texelFetch(depthmap, xy, 0).z;

  vec3 position = world_position(scene.invview, scene.proj, scene.invproj, xy, viewport, depth);
  vec3 normal = world_normal(xy, normalmap);
  vec3 eyevec = normalize(scene.camerapos - position);
  
  vec4 albedocolor = texelFetch(albedomap, xy, 0);
  vec4 specularcolor = texelFetch(specularmap, xy, 0);

  float specularexponent = 1000.0 * specularcolor.w;

  vec3 diffuse = vec3(0);
  vec3 specular = vec3(0);

  MainLight mainlight = environment.mainlight;

  float ambientocclusion = 1;//ambient_intensity(mainlight, ssaomap, vec2(xy)/viewport);

  float mainlightshadow = 1;//shadow_intensity(mainlight, shadowview, shadowmap, position, normal);

  main_light(diffuse, specular, mainlight, normal, eyevec, albedocolor.rgb, specularcolor.rgb, specularexponent, ambientocclusion, mainlightshadow);

  for(uint i = 0, end = environment.pointlightcount; i < end; ++i)
  {
    PointLight pointlight = environment.pointlights[i];

    if (length(pointlight.position - position) < pointlight.attenuation.w)
    {
      point_light(diffuse, specular, pointlight, position, normal, eyevec, albedocolor.rgb, specularcolor.rgb, specularexponent);
    }
  }

  vec3 fragcolor = diffuse + specular * max(1.0 - diffuse, 0.0);

  imageStore(dest, xy, vec4(pow(fragcolor, vec3(1/2.2)), 1.0));
}

#version 440 core
#include "bound.glsl"
#include "camera.glsl"
#include "gbuffer.glsl"
#include "transform.glsl"
#include "lighting.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(set=0, binding=0, std430, row_major) readonly buffer SceneSet 
{
  mat4 proj;
  mat4 invproj;
  mat4 view;
  mat4 invview;
  mat4 worldview;
  mat4 orthoview;
  mat4 prevview;
  mat4 skyview;
  vec4 viewport;

  Camera camera;
  
  MainLight mainlight;

  uint environmentcount;
  Environment environments[MaxEnvironments];

  uint pointlightcount;
  PointLight pointlights[MaxPointLights];

  uint spotlightcount;
  SpotLight spotlights[MaxSpotLights];

  uint probecount;
  Probe probes[MaxProbes];
  
  uint decalcount;
  Decal decals[MaxDecals];
  
  Cluster cluster[];
  
} scene;

layout(set=0, binding=1) uniform sampler2D colormap;
layout(set=0, binding=2) uniform sampler2D diffusemap;
layout(set=0, binding=3) uniform sampler2D specularmap;
layout(set=0, binding=4) uniform sampler2D normalmap;
layout(set=0, binding=5) uniform sampler2D depthmap;
layout(set=0, binding=12) uniform sampler2D ssaomap;
layout(set=0, binding=13) uniform sampler2DArrayShadow shadowmap;
layout(set=0, binding=14) uniform sampler2DArray envbrdfmap;
layout(set=0, binding=15) uniform samplerCube envmaps[MaxEnvironments];
layout(set=0, binding=16) uniform sampler2DShadow spotmaps[MaxSpotLights];
layout(set=0, binding=17) uniform sampler2DArray decalmaps[MaxDecalMaps];
layout(set=0, binding=18) uniform sampler3D fogmap;

layout(set=0, binding=7) writeonly uniform image2D dest;

///////////////////////// mainlight_shadow //////////////////////////////////
float mainlight_shadow(MainLight mainlight, vec3 position, vec3 normal, sampler2DArrayShadow shadowmap)
{
  const float bias[ShadowSlices] = { 0.02, 0.04, 0.08, 0.16 };
  const float spread[ShadowSlices] = { 1.5, 1.2, 1.0, 0.2 };

  for(uint i = 0; i < ShadowSlices; ++i)
  {
    vec3 shadowpos = position + bias[i] * normal;
    vec4 shadowspace = scene.mainlight.shadowview[i] * vec4(shadowpos, 1);
    
    vec4 texel = vec4(0.5 * shadowspace.xy + 0.5, i, shadowspace.z);

    if (texel.x > 0.0 && texel.x < 1.0 && texel.y > 0.0 && texel.y < 1.0 && texel.w > 0.0 && texel.w < 1.0)
    { 
      float weight = max(4 * max(max(abs(shadowspace.x), abs(shadowspace.y)) - 0.75, 0), 500 * max(shadowspace.z - 0.998, 0));

      if (i+i < ShadowSlices && weight > 0)
      {
        vec3 shadowpos2 = position + bias[i+1] * normal;
        vec4 shadowspace2 = scene.mainlight.shadowview[i+1] * vec4(shadowpos2, 1);
        vec4 texel2 = vec4(0.5 * shadowspace2.xy + 0.5, i+1, shadowspace2.z);
      
        return mix(shadow_intensity(shadowmap, texel, spread[i]), shadow_intensity(shadowmap, texel2, spread[i+1]), weight);
      }
      else
      {
        return shadow_intensity(shadowmap, texel, spread[i]);
      }     
    }
  }

  return 1.0;
}

///////////////////////// spotlight_shadow //////////////////////////////////
float spotlight_shadow(SpotLight spotlight, vec3 position, vec3 normal, sampler2DShadow spotmap)
{
  vec3 shadowpos = position + 0.01 * normal;
  vec4 shadowspace = map_parabolic(vec4(transform_multiply(spotlight.shadowview, shadowpos), 1));

  vec3 texel = vec3(0.5 * shadowspace.xy + 0.5, shadowspace.z);

  return shadow_intensity(spotmap, texel, 1.0);
}

///////////////////////// main //////////////////////////////////////////////
void main()
{ 
  gl_WorkGroupSize;
  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
  ivec2 viewport = imageSize(dest);
  
  float depth = texelFetch(depthmap, xy, 0).r;

  vec3 fragcolor = vec3(0);
  
  if (depth < 1.0)
  {
    vec3 position = world_position(scene.invview, scene.proj, scene.invproj, xy, viewport, depth);
    vec3 normal = world_normal(texelFetch(normalmap, xy, 0).xyz);
    vec3 eyevec = normalize(scene.camera.position - position);
    
    uint tile = cluster_tile(xy, viewport);
    uint tilez = cluster_tilez(depth);

    MainLight mainlight = scene.mainlight;

    Material material = make_material(texelFetch(diffusemap, xy, 0), texelFetch(specularmap, xy, 0)); 
    
    //
    // Decals
    //
    
    uint decalmask = uint(texelFetch(normalmap, xy, 0).w * 3);

    for(uint jm = scene.cluster[tile].decalmask[tilez], j = findLSB(jm); jm != 0; jm ^= (1 << j), j = findLSB(jm))
    {
      for(uint im = scene.cluster[tile].decalmasks[tilez][j], i = findLSB(im); im != 0; im ^= (1 << i), i = findLSB(im))
      {
        Decal decal = scene.decals[(j << 5) + i];
        
        if ((decal.mask & decalmask) != 0)
        {
          vec3 localpos = transform_multiply(decal.invtransform, position) / decal.halfdim;
          vec3 localdir = quaternion_multiply(decal.invtransform.real, normal);
          
          if (localpos.x > -1.0 && localpos.x < 1.0 && localpos.y > -1.0 && localpos.y < 1.0 && localpos.z > -1.0 && localpos.z < 1.0 && localdir.z > 0.5)
          { 
            vec3 texcoord = vec3(decal.texcoords.xy + decal.texcoords.zw * (0.5 * localpos.xy + 0.5), decal.layer);
            
            float lod = 0.25 * (decal.texcoords.z * textureSize(decalmaps[decal.albedomap], 0).x) / (decal.halfdim.x * viewport.x) * view_depth(scene.proj, depth) - 0.5;

            vec4 decalalbedo = textureLod(decalmaps[decal.albedomap], texcoord, lod);
            vec4 decalnormal = textureLod(decalmaps[decal.normalmap], texcoord, lod);

            material = mix_material(material, make_material(decalalbedo.rgb * decal.color.rgb, decal.emissive, decal.metalness, decal.reflectivity, decal.roughness), decalalbedo.a*decal.color.a);

            normal = normalize(mix(normal, quaternion_multiply(quaternion_conjugate(decal.invtransform.real), 2 * decalnormal.xyz - 1)*decal.color.a, decalnormal.a*decal.color.a));
          }
        }
      }
    }
    
    //
    // Lighting
    //

    vec3 diffuse = vec3(0);
    vec3 specular = vec3(0);
    
    //
    // Environment Lighting
    //

    vec3 envdiffuse = vec3(0.2);
    vec3 envspecular = vec3(0);

    float ambientintensity = ambient_intensity(mainlight, ssaomap, xy, viewport);
       
    if (ambientintensity != 0)
    {         
      vec3 diffusedirection = dffuse_dominantdirection(normal, eyevec, material.roughness);
      vec3 speculardirection = specular_dominantdirection(normal, reflect(-eyevec, normal), material.roughness);

      for(uint im = scene.cluster[tile].environmentmask[tilez], i = findLSB(im); im != 0; im ^= (1 << i), i = findLSB(im))
      {
        Environment environment = scene.environments[i];

        vec3 localpos = transform_multiply(environment.invtransform, position);
        vec3 localdiffuse = quaternion_multiply(environment.invtransform.real, diffusedirection);
        vec3 localspecular = quaternion_multiply(environment.invtransform.real, speculardirection);
        
        vec2 hittest = intersections(localpos, localspecular, environment.halfdim);
        
        if (hittest.y > max(hittest.x, 0) && hittest.x < 0)
        { 
          vec3 localray = localpos + hittest.y * localspecular;
          float localroughness = clamp(material.roughness * hittest.y / length(localray), 0, material.roughness);     

          envdiffuse = textureLod(envmaps[i], localdiffuse * vec3(1, -1, -1), 6.3).rgb * scene.camera.ambientintensity;
          envspecular = textureLod(envmaps[i], localray * vec3(1, -1, -1), localroughness * 8.0).rgb * scene.camera.specularintensity;
          
          break;
        }
      }

      float totalweight = 1;

      for(uint jm = scene.cluster[tile].probemask[tilez], j = findLSB(jm); jm != 0; jm ^= (1 << j), j = findLSB(jm))
      {
        for(uint im = scene.cluster[tile].probemasks[tilez][j], i = findLSB(im); im != 0; im ^= (1 << i), i = findLSB(im))
        {
          Probe probe = scene.probes[(j << 5) + i];
          
          totalweight += probe_irradiance(envdiffuse, probe, position, diffusedirection);
        }
      }

      envdiffuse *= (1/totalweight);

      vec3 envbrdf = texture(envbrdfmap, vec3(dot(normal, eyevec), material.roughness, 0)).xyz;

      env_light(diffuse, specular, material, envdiffuse, envspecular, envbrdf, ambientintensity);
    }
    
    //
    // Main Light
    //

    float mainlightshadow = mainlight_shadow(mainlight, position, normal, shadowmap);
    
    if (mainlightshadow != 0)
    {      
      main_light(diffuse, specular, mainlight, normal, eyevec, material, mainlightshadow);
    }
   
    //
    // Point Lights
    //
    
    for(uint jm = scene.cluster[tile].pointlightmask[tilez], j = findLSB(jm); jm != 0; jm ^= (1 << j), j = findLSB(jm))
    {
      for(uint im = scene.cluster[tile].pointlightmasks[tilez][j], i = findLSB(im); im != 0; im ^= (1 << i), i = findLSB(im))
      {
        PointLight pointlight = scene.pointlights[(j << 5) + i];
        
        point_light(diffuse, specular, pointlight, position, normal, eyevec, material);
      }
    }
    
    //
    // Spot Lights
    //

    for(uint jm = scene.cluster[tile].spotlightmask[tilez], j = findLSB(jm); jm != 0; jm ^= (1 << j), j = findLSB(jm))
    {
      for(uint im = scene.cluster[tile].spotlightmasks[tilez][j], i = findLSB(im); im != 0; im ^= (1 << i), i = findLSB(im))
      {
        SpotLight spotlight = scene.spotlights[(j << 5) + i];
        
        float spotlightshadow = spotlight_shadow(spotlight, position, normal, spotmaps[(j << 5) + i]);
        
        if (spotlightshadow != 0)
        {
          spot_light(diffuse, specular, spotlight, position, normal, eyevec, material, spotlightshadow);
        }
      }
    }
    
    // Global Fog

    vec4 fog = global_fog(xy, viewport, view_depth(scene.proj, depth), fogmap);
    
    // Final Color

    fragcolor = ((diffuse + material.emissive) * material.diffuse + specular) * fog.a + fog.rgb;
  }
  
  // Output

  imageStore(dest, xy, vec4(scene.camera.exposure * fragcolor, 0)); 
}

#version 440 core
#include "transform.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

const uint WaveResolution = 64;

layout(push_constant, std140, row_major) uniform MeshParams 
{ 
  uint sizex;
  uint sizey;

} mesh;

layout(set=0, binding=0, std430, row_major) readonly buffer OceanParams 
{ 
  mat4 proj;
  mat4 invproj;
  Transform camera;

  vec4 plane;
  float swelllength;
  float swellamplitude;
  float swellsteepness;
  float swellphase;
  vec2 swelldirection;

  float scale;
  float choppiness;
  float smoothing;
  
  uint size;
  vec2 h0[WaveResolution*WaveResolution];
  float phase[WaveResolution*WaveResolution];

} params;

layout(set=0, binding=1, std430, row_major) readonly buffer Spectrum 
{
  vec2 h[WaveResolution*WaveResolution];
  vec2 hx[WaveResolution*WaveResolution];
  vec2 hy[WaveResolution*WaveResolution];

  float weights[WaveResolution*WaveResolution];

} spectrum;

layout(set=0, binding=3) uniform sampler2DArray displacementmap;

struct Vertex
{
  float position[3];
  float texcoord[2];
  float normal[3];
  float tangent[4];
};

layout(set=0, binding=4, std430, row_major) buffer VertexBuffer 
{
  Vertex vertices[];

} vertexbuffer;

#define PI 3.1415926535897932384626433832795

///////////////////////// main //////////////////////////////////////////////
void main()
{ 
  gl_WorkGroupSize;

  ivec2 xy = ivec2(gl_GlobalInvocationID.xy);

  uint index = xy.y * mesh.sizex + xy.x;

  vec3 camerapos = 2 * quaternion_multiply(params.camera.dual, quaternion_conjugate(params.camera.real)).yzw;

  float cameraheight = dot(params.plane.xyz, camerapos) + params.plane.w;

  float margin = 1 + sqrt((2*params.swellamplitude + 0.5) / cameraheight);

  float u = (2 * float(xy.x) / (mesh.sizex-1) - 1) * margin;
  float v = (1 - 2 * float(xy.y) / (mesh.sizey-1)) * margin;

  vec4 viewvec = params.invproj * vec4(u, v, 0.0, 1.0);
  vec3 worlddir = quaternion_multiply(params.camera.real, normalize(viewvec.xyz));

  float costheta = dot(worlddir, -params.plane.xyz);

  float dist = (costheta > 0) ? cameraheight/costheta : 1e6;

  vec3 baseposition = vec3(camerapos.xy + dist * worlddir.xy, -params.plane.w);

  float amplitude = params.swellamplitude;
  float frequency = 2 * PI / params.swelllength;
  vec2 direction = params.swelldirection;
  float qi = params.swellsteepness / (frequency * amplitude * 4 + 1e-6);

  float phi = frequency * amplitude;
  float theta = frequency * dot(direction, baseposition.xy) + params.swellphase;

  vec3 position = baseposition + vec3(qi * amplitude * direction * cos(theta), amplitude * sin(theta));

  vec3 normal = vec3(phi * direction * cos(theta)/6, qi * phi * sin(theta));
  vec3 tangent = vec3(qi * phi * direction * direction.x * sin(theta), phi * direction.x * cos(theta)/6);

  mat3 tbn;
  tbn[2] = normalize(vec3(-normal.x, -normal.y, 1 - normal.z));
  tbn[0] = normalize(vec3(1 - tangent.x, -tangent.y, tangent.z));
  tbn[1] = cross(tbn[2], tbn[0]);

  vec2 texcoord = position.xy * params.scale;

  vec3 displacement = texture(displacementmap, vec3(texcoord, 0)).xyz;
  vec3 displacementnormal = texture(displacementmap, vec3(texcoord, 1)).xyz;
  
  float smoothing = pow(clamp(dist * params.smoothing - 0.35, 0.0, 1.0), 0.2);

  tbn[2] = normalize(mix(tbn * displacementnormal, params.plane.xyz, smoothing));

  vertexbuffer.vertices[index].position[0] = position.x - displacement.x;
  vertexbuffer.vertices[index].position[1] = position.y - displacement.y;
  vertexbuffer.vertices[index].position[2] = position.z + displacement.z;

  vertexbuffer.vertices[index].normal[0] = tbn[2].x;
  vertexbuffer.vertices[index].normal[1] = tbn[2].y;
  vertexbuffer.vertices[index].normal[2] = tbn[2].z;

  vertexbuffer.vertices[index].tangent[0] = tbn[0].x;
  vertexbuffer.vertices[index].tangent[0] = tbn[0].y;
  vertexbuffer.vertices[index].tangent[0] = tbn[0].z;
  vertexbuffer.vertices[index].tangent[0] = 1;

  vertexbuffer.vertices[index].texcoord[0] = 0.1*position.x;
  vertexbuffer.vertices[index].texcoord[1] = 0.1*position.y;
}
